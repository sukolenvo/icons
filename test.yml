# Generated with protoc-gen-openapi
# https://github.com/googleapis/gnostic/tree/master/apps/protoc-gen-openapi

openapi: 3.0.3
info:
    title: Subscriber
    description: The service that an application uses to manipulate subscriptions and to consume messages from a subscription via the `Pull` method or by establishing a bi-directional stream using the `StreamingPull` method.
    version: 0.0.1
paths:
    /v1/projects/{project}/schemas:
        get:
            summary: Lists schemas in a project.
            operationId: SchemaService_ListSchemas
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: view
                  in: query
                  description: The set of Schema fields to return in the response. If not set, returns Schemas with `name` and `type`, but not `definition`. Set to `FULL` to retrieve all fields.
                  schema:
                    type: string
                - name: page_size
                  in: query
                  description: Maximum number of schemas to return.
                  schema:
                    type: string
                - name: page_token
                  in: query
                  description: The value returned by the last `ListSchemasResponse`; indicates that this is a continuation of a prior `ListSchemas` call, and that the system should return the next page of data.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListSchemasResponse'
        post:
            summary: Creates a schema.
            operationId: SchemaService_CreateSchema
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: schema_id
                  in: query
                  description: The ID to use for the schema, which will become the final component of the schema's resource name. See https://cloud.google.com/pubsub/docs/admin#resource_names for resource name constraints.
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Schema'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Schema'
    /v1/projects/{project}/schemas/{schema}:
        get:
            summary: Gets a schema.
            operationId: SchemaService_GetSchema
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: schema
                  in: path
                  description: The schema id.
                  required: true
                  schema:
                    type: string
                - name: view
                  in: query
                  description: The set of fields to return in the response. If not set, returns a Schema with `name` and `type`, but not `definition`. Set to `FULL` to retrieve all fields.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Schema'
        delete:
            summary: Deletes a schema.
            operationId: SchemaService_DeleteSchema
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: schema
                  in: path
                  description: The schema id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
    /v1/projects/{project}/schemas:validate:
        post:
            summary: Validates a schema.
            operationId: SchemaService_ValidateSchema
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ValidateSchemaRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ValidateSchemaResponse'
    /v1/projects/{project}/schemas:validateMessage:
        post:
            summary: Validates a message against a schema.
            operationId: SchemaService_ValidateMessage
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ValidateMessageRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ValidateMessageResponse'
    /v1/projects/{project}/snapshots:
        get:
            summary: Lists the existing snapshots. Snapshots are used in [Seek]( https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot.
            operationId: Subscriber_ListSnapshots
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: page_size
                  in: query
                  description: Maximum number of snapshots to return.
                  schema:
                    type: string
                - name: page_token
                  in: query
                  description: The value returned by the last `ListSnapshotsResponse`; indicates that this is a continuation of a prior `ListSnapshots` call, and that the system should return the next page of data.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListSnapshotsResponse'
    /v1/projects/{project}/snapshots/{snapshot}:
        get:
            summary: Gets the configuration details of a snapshot. Snapshots are used in <a href="https://cloud.google.com/pubsub/docs/replay-overview">Seek</a> operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot.
            operationId: Subscriber_GetSnapshot
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: snapshot
                  in: path
                  description: The snapshot id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Snapshot'
        put:
            summary: Creates a snapshot from the requested subscription. Snapshots are used in [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot. If the snapshot already exists, returns `ALREADY_EXISTS`. If the requested subscription doesn't exist, returns `NOT_FOUND`. If the backlog in the subscription is too old -- and the resulting snapshot would expire in less than 1 hour -- then `FAILED_PRECONDITION` is returned. See also the `Snapshot.expire_time` field. If the name is not provided in the request, the server will assign a random name for this snapshot on the same project as the subscription, conforming to the [resource name format] (https://cloud.google.com/pubsub/docs/admin#resource_names). The generated name is populated in the returned Snapshot object. Note that for REST API requests, you must specify a name in the request.
            operationId: Subscriber_CreateSnapshot
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: snapshot
                  in: path
                  description: The snapshot id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateSnapshotRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Snapshot'
        delete:
            summary: Removes an existing snapshot. Snapshots are used in [Seek] (https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot. When the snapshot is deleted, all messages retained in the snapshot are immediately dropped. After a snapshot is deleted, a new one may be created with the same name, but the new one has no association with the old snapshot or its subscription, unless the same subscription is specified.
            operationId: Subscriber_DeleteSnapshot
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: snapshot
                  in: path
                  description: The snapshot id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
        patch:
            summary: Updates an existing snapshot. Snapshots are used in <a href="https://cloud.google.com/pubsub/docs/replay-overview">Seek</a> operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot.
            operationId: Subscriber_UpdateSnapshot
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: snapshot
                  in: path
                  description: The snapshot id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateSnapshotRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Snapshot'
    /v1/projects/{project}/subscriptions:
        get:
            summary: Lists matching subscriptions.
            operationId: Subscriber_ListSubscriptions
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: page_size
                  in: query
                  description: Maximum number of subscriptions to return.
                  schema:
                    type: string
                - name: page_token
                  in: query
                  description: The value returned by the last `ListSubscriptionsResponse`; indicates that this is a continuation of a prior `ListSubscriptions` call, and that the system should return the next page of data.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListSubscriptionsResponse'
    /v1/projects/{project}/subscriptions/{subscription}:
        get:
            summary: Gets the configuration details of a subscription.
            operationId: Subscriber_GetSubscription
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: subscription
                  in: path
                  description: The subscription id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Subscription'
        put:
            summary: Creates a subscription to a given topic. See the [resource name rules] (https://cloud.google.com/pubsub/docs/admin#resource_names). If the subscription already exists, returns `ALREADY_EXISTS`. If the corresponding topic doesn't exist, returns `NOT_FOUND`. If the name is not provided in the request, the server will assign a random name for this subscription on the same project as the topic, conforming to the [resource name format] (https://cloud.google.com/pubsub/docs/admin#resource_names). The generated name is populated in the returned Subscription object. Note that for REST API requests, you must specify a name in the request.
            operationId: Subscriber_CreateSubscription
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: subscription
                  in: path
                  description: The subscription id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Subscription'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Subscription'
        delete:
            summary: Deletes an existing subscription. All messages retained in the subscription are immediately dropped. Calls to `Pull` after deletion will return `NOT_FOUND`. After a subscription is deleted, a new one may be created with the same name, but the new one has no association with the old subscription or its topic unless the same topic is specified.
            operationId: Subscriber_DeleteSubscription
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: subscription
                  in: path
                  description: The subscription id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
        patch:
            summary: Updates an existing subscription. Note that certain properties of a subscription, such as its topic, are not modifiable.
            operationId: Subscriber_UpdateSubscription
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: subscription
                  in: path
                  description: The subscription id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateSubscriptionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Subscription'
    /v1/projects/{project}/subscriptions/{subscription}:acknowledge:
        post:
            summary: Acknowledges the messages associated with the `ack_ids` in the `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages from the subscription. Acknowledging a message whose ack deadline has expired may succeed, but such a message may be redelivered later. Acknowledging a message more than once will not result in an error.
            operationId: Subscriber_Acknowledge
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: subscription
                  in: path
                  description: The subscription id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/AcknowledgeRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
    /v1/projects/{project}/subscriptions/{subscription}:detach:
        post:
            summary: Detaches a subscription from this topic. All messages retained in the subscription are dropped. Subsequent `Pull` and `StreamingPull` requests will return FAILED_PRECONDITION. If the subscription is a push subscription, pushes to the endpoint will stop.
            operationId: Publisher_DetachSubscription
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: subscription
                  in: path
                  description: The subscription id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DetachSubscriptionResponse'
    /v1/projects/{project}/subscriptions/{subscription}:modifyAckDeadline:
        post:
            summary: Modifies the ack deadline for a specific message. This method is useful to indicate that more time is needed to process a message by the subscriber, or to make the message available for redelivery if the processing was interrupted. Note that this does not modify the subscription-level `ackDeadlineSeconds` used for subsequent messages.
            operationId: Subscriber_ModifyAckDeadline
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: subscription
                  in: path
                  description: The subscription id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ModifyAckDeadlineRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
    /v1/projects/{project}/subscriptions/{subscription}:modifyPushConfig:
        post:
            summary: Modifies the `PushConfig` for a specified subscription. This may be used to change a push subscription to a pull one (signified by an empty `PushConfig`) or vice versa, or change the endpoint URL and other attributes of a push subscription. Messages will accumulate for delivery continuously through the call regardless of changes to the `PushConfig`.
            operationId: Subscriber_ModifyPushConfig
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: subscription
                  in: path
                  description: The subscription id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ModifyPushConfigRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
    /v1/projects/{project}/subscriptions/{subscription}:pull:
        post:
            summary: Pulls messages from the server. The server may return `UNAVAILABLE` if there are too many concurrent pull requests pending for the given subscription.
            operationId: Subscriber_Pull
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: subscription
                  in: path
                  description: The subscription id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PullRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PullResponse'
    /v1/projects/{project}/subscriptions/{subscription}:seek:
        post:
            summary: Seeks an existing subscription to a point in time or to a given snapshot, whichever is provided in the request. Snapshots are used in [Seek] (https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot. Note that both the subscription and the snapshot must be on the same topic.
            operationId: Subscriber_Seek
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: subscription
                  in: path
                  description: The subscription id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SeekRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SeekResponse'
    /v1/projects/{project}/topics:
        get:
            summary: Lists matching topics.
            operationId: Publisher_ListTopics
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: page_size
                  in: query
                  description: Maximum number of topics to return.
                  schema:
                    type: string
                - name: page_token
                  in: query
                  description: The value returned by the last `ListTopicsResponse`; indicates that this is a continuation of a prior `ListTopics` call, and that the system should return the next page of data.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListTopicsResponse'
    /v1/projects/{project}/topics/{topic}:
        get:
            summary: Gets the configuration of a topic.
            operationId: Publisher_GetTopic
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: topic
                  in: path
                  description: The topic id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Topic'
        put:
            summary: Creates the given topic with the given name. See the [resource name rules] (https://cloud.google.com/pubsub/docs/admin#resource_names).
            operationId: Publisher_CreateTopic
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: topic
                  in: path
                  description: The topic id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Topic'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Topic'
        delete:
            summary: Deletes the topic with the given name. Returns `NOT_FOUND` if the topic does not exist. After a topic is deleted, a new topic may be created with the same name; this is an entirely new topic with none of the old configuration or subscriptions. Existing subscriptions to this topic are not deleted, but their `topic` field is set to `_deleted-topic_`.
            operationId: Publisher_DeleteTopic
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: topic
                  in: path
                  description: The topic id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
        patch:
            summary: Updates an existing topic. Note that certain properties of a topic are not modifiable.
            operationId: Publisher_UpdateTopic
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: topic
                  in: path
                  description: The topic id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateTopicRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Topic'
    /v1/projects/{project}/topics/{topic}/snapshots:
        get:
            summary: Lists the names of the snapshots on this topic. Snapshots are used in [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot.
            operationId: Publisher_ListTopicSnapshots
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: topic
                  in: path
                  description: The topic id.
                  required: true
                  schema:
                    type: string
                - name: page_size
                  in: query
                  description: Maximum number of snapshot names to return.
                  schema:
                    type: string
                - name: page_token
                  in: query
                  description: The value returned by the last `ListTopicSnapshotsResponse`; indicates that this is a continuation of a prior `ListTopicSnapshots` call, and that the system should return the next page of data.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListTopicSnapshotsResponse'
    /v1/projects/{project}/topics/{topic}/subscriptions:
        get:
            summary: Lists the names of the attached subscriptions on this topic.
            operationId: Publisher_ListTopicSubscriptions
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: topic
                  in: path
                  description: The topic id.
                  required: true
                  schema:
                    type: string
                - name: page_size
                  in: query
                  description: Maximum number of subscription names to return.
                  schema:
                    type: string
                - name: page_token
                  in: query
                  description: The value returned by the last `ListTopicSubscriptionsResponse`; indicates that this is a continuation of a prior `ListTopicSubscriptions` call, and that the system should return the next page of data.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListTopicSubscriptionsResponse'
    /v1/projects/{project}/topics/{topic}:publish:
        post:
            summary: Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic does not exist.
            operationId: Publisher_Publish
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: topic
                  in: path
                  description: The topic id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PublishRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PublishResponse'
components:
    schemas:
        AcknowledgeRequest:
            properties:
                subscription:
                    type: string
                    description: Required. The subscription whose message is being acknowledged. Format is `projects/{project}/subscriptions/{sub}`.
                ack_ids:
                    type: array
                    items:
                        type: string
                    description: Required. The acknowledgment ID for the messages being acknowledged that was returned by the Pub/Sub system in the `Pull` response. Must not be empty.
            description: Request for the Acknowledge method.
        CreateSnapshotRequest:
            properties:
                name:
                    type: string
                    description: Required. User-provided name for this snapshot. If the name is not provided in the request, the server will assign a random name for this snapshot on the same project as the subscription. Note that for REST API requests, you must specify a name.  See the <a href="https://cloud.google.com/pubsub/docs/admin#resource_names"> resource name rules</a>. Format is `projects/{project}/snapshots/{snap}`.
                subscription:
                    type: string
                    description: 'Required. The subscription whose backlog the snapshot retains. Specifically, the created snapshot is guaranteed to retain:  (a) The existing backlog on the subscription. More precisely, this is      defined as the messages in the subscription''s backlog that are      unacknowledged upon the successful completion of the      `CreateSnapshot` request; as well as:  (b) Any messages published to the subscription''s topic following the      successful completion of the CreateSnapshot request. Format is `projects/{project}/subscriptions/{sub}`.'
                labels:
                    type: object
                    description: See <a href="https://cloud.google.com/pubsub/docs/labels"> Creating and managing labels</a>.
            description: Request for the `CreateSnapshot` method.
        DeadLetterPolicy:
            properties:
                dead_letter_topic:
                    type: string
                    description: The name of the topic to which dead letter messages should be published. Format is `projects/{project}/topics/{topic}`.The Cloud Pub/Sub service account associated with the enclosing subscription's parent project (i.e., service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have permission to Publish() to this topic. The operation will fail if the topic does not exist. Users should ensure that there is a subscription attached to this topic since messages published to a topic with no subscriptions are lost.
                max_delivery_attempts:
                    type: integer
                    description: The maximum number of delivery attempts for any message. The value must be between 5 and 100. The number of delivery attempts is defined as 1 + (the sum of number of NACKs and number of times the acknowledgement deadline has been exceeded for the message). A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that client libraries may automatically extend ack_deadlines. This field will be honored on a best effort basis. If this parameter is 0, a default value of 5 is used.
                    format: int32
            description: Dead lettering is done on a best effort basis. The same message might be dead lettered multiple times. If validation on any of the fields fails at subscription creation/updation, the create/update subscription request will fail.
        DetachSubscriptionResponse:
            properties: {}
            description: Response for the DetachSubscription method. Reserved for future use.
        Duration:
            properties:
                seconds:
                    type: integer
                    description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                    format: int64
                nanos:
                    type: integer
                    description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                    format: int32
            description: 'A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years. # Examples Example 1: Compute Duration from two Timestamps in pseudo code.     Timestamp start = ...;     Timestamp end = ...;     Duration duration = ...;     duration.seconds = end.seconds - start.seconds;     duration.nanos = end.nanos - start.nanos;     if (duration.seconds < 0 && duration.nanos > 0) {       duration.seconds += 1;       duration.nanos -= 1000000000;     } else if (duration.seconds > 0 && duration.nanos < 0) {       duration.seconds -= 1;       duration.nanos += 1000000000;     } Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.     Timestamp start = ...;     Duration duration = ...;     Timestamp end = ...;     end.seconds = start.seconds + duration.seconds;     end.nanos = start.nanos + duration.nanos;     if (end.nanos < 0) {       end.seconds -= 1;       end.nanos += 1000000000;     } else if (end.nanos >= 1000000000) {       end.seconds += 1;       end.nanos -= 1000000000;     } Example 3: Compute Duration from datetime.timedelta in Python.     td = datetime.timedelta(days=3, minutes=10)     duration = Duration()     duration.FromTimedelta(td) # JSON Mapping In JSON format, the Duration type is encoded as a string rather than an object, where the string ends in the suffix "s" (indicating seconds) and is preceded by the number of seconds, with nanoseconds expressed as fractional seconds. For example, 3 seconds with 0 nanoseconds should be encoded in JSON format as "3s", while 3 seconds and 1 nanosecond should be expressed in JSON format as "3.000000001s", and 3 seconds and 1 microsecond should be expressed in JSON format as "3.000001s".'
        ExpirationPolicy:
            properties:
                ttl:
                    $ref: '#/components/schemas/Duration'
            description: A policy that specifies the conditions for resource expiration (i.e., automatic resource deletion).
        FieldMask:
            properties:
                paths:
                    type: array
                    items:
                        type: string
                    description: The set of field mask paths.
            description: '`FieldMask` represents a set of symbolic field paths, for example:     paths: "f.a"     paths: "f.b.d" Here `f` represents a field in some root message, `a` and `b` fields in the message found in `f`, and `d` a field found in the message in `f.b`. Field masks are used to specify a subset of fields that should be returned by a get operation or modified by an update operation. Field masks also have a custom JSON encoding (see below). # Field Masks in Projections When used in the context of a projection, a response message or sub-message is filtered by the API to only contain those fields as specified in the mask. For example, if the mask in the previous example is applied to a response message as follows:     f {       a : 22       b {         d : 1         x : 2       }       y : 13     }     z: 8 The result will not contain specific values for fields x,y and z (their value will be set to the default, and omitted in proto text output):     f {       a : 22       b {         d : 1       }     } A repeated field is not allowed except at the last position of a paths string. If a FieldMask object is not present in a get operation, the operation applies to all fields (as if a FieldMask of all fields had been specified). Note that a field mask does not necessarily apply to the top-level response message. In case of a REST get operation, the field mask applies directly to the response, but in case of a REST list operation, the mask instead applies to each individual message in the returned resource list. In case of a REST custom method, other definitions may be used. Where the mask applies will be clearly documented together with its declaration in the API.  In any case, the effect on the returned resource/resources is required behavior for APIs. # Field Masks in Update Operations A field mask in update operations specifies which fields of the targeted resource are going to be updated. The API is required to only change the values of the fields as specified in the mask and leave the others untouched. If a resource is passed in to describe the updated values, the API ignores the values of all fields not covered by the mask. If a repeated field is specified for an update operation, new values will be appended to the existing repeated field in the target resource. Note that a repeated field is only allowed in the last position of a `paths` string. If a sub-message is specified in the last position of the field mask for an update operation, then new value will be merged into the existing sub-message in the target resource. For example, given the target message:     f {       b {         d: 1         x: 2       }       c: [1]     } And an update message:     f {       b {         d: 10       }       c: [2]     } then if the field mask is:  paths: ["f.b", "f.c"] then the result will be:     f {       b {         d: 10         x: 2       }       c: [1, 2]     } An implementation may provide options to override this default behavior for repeated and message fields. In order to reset a field''s value to the default, the field must be in the mask and set to the default value in the provided resource. Hence, in order to reset all fields of a resource, provide a default instance of the resource and set all fields in the mask, or do not provide a mask as described below. If a field mask is not present on update, the operation applies to all fields (as if a field mask of all fields has been specified). Note that in the presence of schema evolution, this may mean that fields the client does not know and has therefore not filled into the request will be reset to their default. If this is unwanted behavior, a specific service may require a client to always specify a field mask, producing an error if not. As with get operations, the location of the resource which describes the updated values in the request message depends on the operation kind. In any case, the effect of the field mask is required to be honored by the API. ## Considerations for HTTP REST The HTTP kind of an update operation which uses a field mask must be set to PATCH instead of PUT in order to satisfy HTTP semantics (PUT must only be used for full updates). # JSON Encoding of Field Masks In JSON, a field mask is encoded as a single string where paths are separated by a comma. Fields name in each path are converted to/from lower-camel naming conventions. As an example, consider the following message declarations:     message Profile {       User user = 1;       Photo photo = 2;     }     message User {       string display_name = 1;       string address = 2;     } In proto a field mask for `Profile` may look as such:     mask {       paths: "user.display_name"       paths: "photo"     } In JSON, the same mask is represented as below:     {       mask: "user.displayName,photo"     } # Field Masks and Oneof Fields Field masks treat fields in oneofs just as regular fields. Consider the following message:     message SampleMessage {       oneof test_oneof {         string name = 4;         SubMessage sub_message = 9;       }     } The field mask can be:     mask {       paths: "name"     } Or:     mask {       paths: "sub_message"     } Note that oneof type names ("test_oneof" in this case) cannot be used in paths. ## Field Mask Verification The implementation of any API method which has a FieldMask type field in the request should verify the included field paths, and return an `INVALID_ARGUMENT` error if any path is unmappable.'
        ListSchemasResponse:
            properties:
                schemas:
                    type: array
                    items:
                        $ref: '#/components/schemas/Schema'
                    description: The resulting schemas.
                next_page_token:
                    type: string
                    description: If not empty, indicates that there may be more schemas that match the request; this value should be passed in a new `ListSchemasRequest`.
            description: Response for the `ListSchemas` method.
        ListSnapshotsResponse:
            properties:
                snapshots:
                    type: array
                    items:
                        $ref: '#/components/schemas/Snapshot'
                    description: The resulting snapshots.
                next_page_token:
                    type: string
                    description: If not empty, indicates that there may be more snapshot that match the request; this value should be passed in a new `ListSnapshotsRequest`.
            description: Response for the `ListSnapshots` method.
        ListSubscriptionsResponse:
            properties:
                subscriptions:
                    type: array
                    items:
                        $ref: '#/components/schemas/Subscription'
                    description: The subscriptions that match the request.
                next_page_token:
                    type: string
                    description: If not empty, indicates that there may be more subscriptions that match the request; this value should be passed in a new `ListSubscriptionsRequest` to get more subscriptions.
            description: Response for the `ListSubscriptions` method.
        ListTopicSnapshotsResponse:
            properties:
                snapshots:
                    type: array
                    items:
                        type: string
                    description: The names of the snapshots that match the request.
                next_page_token:
                    type: string
                    description: If not empty, indicates that there may be more snapshots that match the request; this value should be passed in a new `ListTopicSnapshotsRequest` to get more snapshots.
            description: Response for the `ListTopicSnapshots` method.
        ListTopicSubscriptionsResponse:
            properties:
                subscriptions:
                    type: array
                    items:
                        type: string
                    description: The names of subscriptions attached to the topic specified in the request.
                next_page_token:
                    type: string
                    description: If not empty, indicates that there may be more subscriptions that match the request; this value should be passed in a new `ListTopicSubscriptionsRequest` to get more subscriptions.
            description: Response for the `ListTopicSubscriptions` method.
        ListTopicsResponse:
            properties:
                topics:
                    type: array
                    items:
                        $ref: '#/components/schemas/Topic'
                    description: The resulting topics.
                next_page_token:
                    type: string
                    description: If not empty, indicates that there may be more topics that match the request; this value should be passed in a new `ListTopicsRequest`.
            description: Response for the `ListTopics` method.
        MessageStoragePolicy:
            properties:
                allowed_persistence_regions:
                    type: array
                    items:
                        type: string
                    description: A list of IDs of GCP regions where messages that are published to the topic may be persisted in storage. Messages published by publishers running in non-allowed GCP regions (or running outside of GCP altogether) will be routed for storage in one of the allowed regions. An empty list means that no regions are allowed, and is not a valid configuration.
            description: A policy constraining the storage of messages published to the topic.
        ModifyAckDeadlineRequest:
            properties:
                subscription:
                    type: string
                    description: Required. The name of the subscription. Format is `projects/{project}/subscriptions/{sub}`.
                ack_ids:
                    type: array
                    items:
                        type: string
                    description: Required. List of acknowledgment IDs.
                ack_deadline_seconds:
                    type: integer
                    description: Required. The new ack deadline with respect to the time this request was sent to the Pub/Sub system. For example, if the value is 10, the new ack deadline will expire 10 seconds after the `ModifyAckDeadline` call was made. Specifying zero might immediately make the message available for delivery to another subscriber client. This typically results in an increase in the rate of message redeliveries (that is, duplicates). The minimum deadline you can specify is 0 seconds. The maximum deadline you can specify is 600 seconds (10 minutes).
                    format: int32
            description: Request for the ModifyAckDeadline method.
        ModifyPushConfigRequest:
            properties:
                subscription:
                    type: string
                    description: Required. The name of the subscription. Format is `projects/{project}/subscriptions/{sub}`.
                push_config:
                    $ref: '#/components/schemas/PushConfig'
            description: Request for the ModifyPushConfig method.
        PublishRequest:
            properties:
                topic:
                    type: string
                    description: Required. The messages in the request will be published on this topic. Format is `projects/{project}/topics/{topic}`.
                messages:
                    type: array
                    items:
                        $ref: '#/components/schemas/PubsubMessage'
                    description: Required. The messages to publish.
            description: Request for the Publish method.
        PublishResponse:
            properties:
                message_ids:
                    type: array
                    items:
                        type: string
                    description: The server-assigned ID of each published message, in the same order as the messages in the request. IDs are guaranteed to be unique within the topic.
            description: Response for the `Publish` method.
        PubsubMessage:
            properties:
                data:
                    type: string
                    description: The message data field. If this field is empty, the message must contain at least one attribute.
                    format: bytes
                attributes:
                    type: object
                    description: Attributes for this message. If this field is empty, the message must contain non-empty data. This can be used to filter messages on the subscription.
                message_id:
                    type: string
                    description: ID of this message, assigned by the server when the message is published. Guaranteed to be unique within the topic. This value may be read by a subscriber that receives a `PubsubMessage` via a `Pull` call or a push delivery. It must not be populated by the publisher in a `Publish` call.
                publish_time:
                    type: string
                    description: The time at which the message was published, populated by the server when it receives the `Publish` call. It must not be populated by the publisher in a `Publish` call.
                    format: RFC3339
                ordering_key:
                    type: string
                    description: If non-empty, identifies related messages for which publish order should be respected. If a `Subscription` has `enable_message_ordering` set to `true`, messages published with the same non-empty `ordering_key` value will be delivered to subscribers in the order in which they are received by the Pub/Sub system. All `PubsubMessage`s published in a given `PublishRequest` must specify the same `ordering_key` value.
            description: A message that is published by publishers and consumed by subscribers. The message must contain either a non-empty data field or at least one attribute. Note that client libraries represent this object differently depending on the language. See the corresponding [client library documentation](https://cloud.google.com/pubsub/docs/reference/libraries) for more information. See [quotas and limits] (https://cloud.google.com/pubsub/quotas) for more information about message limits.
        PullRequest:
            properties:
                subscription:
                    type: string
                    description: Required. The subscription from which messages should be pulled. Format is `projects/{project}/subscriptions/{sub}`.
                return_immediately:
                    type: boolean
                    description: 'Optional. If this field set to true, the system will respond immediately even if it there are no messages available to return in the `Pull` response. Otherwise, the system may wait (for a bounded amount of time) until at least one message is available, rather than returning no messages. Warning: setting this field to `true` is discouraged because it adversely impacts the performance of `Pull` operations. We recommend that users do not set this field.'
                max_messages:
                    type: integer
                    description: Required. The maximum number of messages to return for this request. Must be a positive integer. The Pub/Sub system may return fewer than the number specified.
                    format: int32
            description: Request for the `Pull` method.
        PullResponse:
            properties:
                received_messages:
                    type: array
                    items:
                        $ref: '#/components/schemas/ReceivedMessage'
                    description: Received Pub/Sub messages. The list will be empty if there are no more messages available in the backlog. For JSON, the response can be entirely empty. The Pub/Sub system may return fewer than the `maxMessages` requested even if there are more messages available in the backlog.
            description: Response for the `Pull` method.
        PushConfig:
            properties:
                push_endpoint:
                    type: string
                    description: A URL locating the endpoint to which messages should be pushed. For example, a Webhook endpoint might use `https://example.com/push`.
                attributes:
                    type: object
                    description: 'Endpoint configuration attributes that can be used to control different aspects of the message delivery. The only currently supported attribute is `x-goog-version`, which you can use to change the format of the pushed message. This attribute indicates the version of the data expected by the endpoint. This controls the shape of the pushed message (i.e., its fields and metadata). If not present during the `CreateSubscription` call, it will default to the version of the Pub/Sub API used to make such call. If not present in a `ModifyPushConfig` call, its value will not be changed. `GetSubscription` calls will always return a valid version, even if the subscription was created without this attribute. The only supported values for the `x-goog-version` attribute are: * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API. * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API. For example: <pre><code>attributes { "x-goog-version": "v1" } </code></pre>'
                oidc_token:
                    $ref: '#/components/schemas/OidcToken'
            description: Configuration for a push delivery endpoint.
        ReceivedMessage:
            properties:
                ack_id:
                    type: string
                    description: This ID can be used to acknowledge the received message.
                message:
                    $ref: '#/components/schemas/PubsubMessage'
                delivery_attempt:
                    type: integer
                    description: The approximate number of times that Cloud Pub/Sub has attempted to deliver the associated message to a subscriber. More precisely, this is 1 + (number of NACKs) + (number of ack_deadline exceeds) for this message. A NACK is any call to ModifyAckDeadline with a 0 deadline. An ack_deadline exceeds event is whenever a message is not acknowledged within ack_deadline. Note that ack_deadline is initially Subscription.ackDeadlineSeconds, but may get extended automatically by the client library. Upon the first delivery of a given message, `delivery_attempt` will have a value of 1. The value is calculated at best effort and is approximate. If a DeadLetterPolicy is not set on the subscription, this will be 0.
                    format: int32
            description: A message and its corresponding acknowledgment ID.
        RetryPolicy:
            properties:
                minimum_backoff:
                    $ref: '#/components/schemas/Duration'
                maximum_backoff:
                    $ref: '#/components/schemas/Duration'
            description: A policy that specifies how Cloud Pub/Sub retries message delivery. Retry delay will be exponential based on provided minimum and maximum backoffs. https://en.wikipedia.org/wiki/Exponential_backoff. RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message. Retry Policy is implemented on a best effort basis. At times, the delay between consecutive deliveries may not match the configuration. That is, delay can be more or less than configured backoff.
        Schema:
            properties:
                name:
                    type: string
                    description: Required. Name of the schema. Format is `projects/{project}/schemas/{schema}`.
                type:
                    type: integer
                    description: The type of the schema definition.
                    format: enum
                definition:
                    type: string
                    description: The definition of the schema. This should contain a string representing the full definition of the schema that is a valid schema definition of the type specified in `type`.
            description: A schema resource.
        SchemaSettings:
            properties:
                schema:
                    type: string
                    description: Required. The name of the schema that messages published should be validated against. Format is `projects/{project}/schemas/{schema}`. The value of this field will be `_deleted-schema_` if the schema has been deleted.
                encoding:
                    type: integer
                    description: The encoding of messages validated against `schema`.
                    format: enum
            description: Settings for validating messages published against a schema.
        SeekRequest:
            properties:
                subscription:
                    type: string
                    description: Required. The subscription to affect.
                time:
                    type: string
                    description: The time to seek to. Messages retained in the subscription that were published before this time are marked as acknowledged, and messages retained in the subscription that were published after this time are marked as unacknowledged. Note that this operation affects only those messages retained in the subscription (configured by the combination of `message_retention_duration` and `retain_acked_messages`). For example, if `time` corresponds to a point before the message retention window (or to a point before the system's notion of the subscription creation time), only retained messages will be marked as unacknowledged, and already-expunged messages will not be restored.
                    format: RFC3339
                snapshot:
                    type: string
                    description: The snapshot to seek to. The snapshot's topic must be the same as that of the provided subscription. Format is `projects/{project}/snapshots/{snap}`.
            description: Request for the `Seek` method.
        SeekResponse:
            properties: {}
            description: Response for the `Seek` method (this response is empty).
        Snapshot:
            properties:
                name:
                    type: string
                    description: The name of the snapshot.
                topic:
                    type: string
                    description: The name of the topic from which this snapshot is retaining messages.
                expire_time:
                    type: string
                    description: The snapshot is guaranteed to exist up until this time. A newly-created snapshot expires no later than 7 days from the time of its creation. Its exact lifetime is determined at creation by the existing backlog in the source subscription. Specifically, the lifetime of the snapshot is `7 days - (age of oldest unacked message in the subscription)`. For example, consider a subscription whose oldest unacked message is 3 days old. If a snapshot is created from this subscription, the snapshot -- which will always capture this 3-day-old backlog as long as the snapshot exists -- will expire in 4 days. The service will refuse to create a snapshot that would expire in less than 1 hour after creation.
                    format: RFC3339
                labels:
                    type: object
                    description: See [Creating and managing labels] (https://cloud.google.com/pubsub/docs/labels).
            description: A snapshot resource. Snapshots are used in [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot.
        Subscription:
            properties:
                name:
                    type: string
                    description: Required. The name of the subscription. It must have the format `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in length, and it must not start with `"goog"`.
                topic:
                    type: string
                    description: Required. The name of the topic from which this subscription is receiving messages. Format is `projects/{project}/topics/{topic}`. The value of this field will be `_deleted-topic_` if the topic has been deleted.
                push_config:
                    $ref: '#/components/schemas/PushConfig'
                ack_deadline_seconds:
                    type: integer
                    description: The approximate amount of time (on a best-effort basis) Pub/Sub waits for the subscriber to acknowledge receipt before resending the message. In the interval after the message is delivered and before it is acknowledged, it is considered to be <i>outstanding</i>. During that time period, the message will not be redelivered (on a best-effort basis). For pull subscriptions, this value is used as the initial value for the ack deadline. To override this value for a given message, call `ModifyAckDeadline` with the corresponding `ack_id` if using non-streaming pull or send the `ack_id` in a `StreamingModifyAckDeadlineRequest` if using streaming pull. The minimum custom deadline you can specify is 10 seconds. The maximum custom deadline you can specify is 600 seconds (10 minutes). If this parameter is 0, a default value of 10 seconds is used. For push delivery, this value is also used to set the request timeout for the call to the push endpoint. If the subscriber never acknowledges the message, the Pub/Sub system will eventually redeliver the message.
                    format: int32
                retain_acked_messages:
                    type: boolean
                    description: Indicates whether to retain acknowledged messages. If true, then messages are not expunged from the subscription's backlog, even if they are acknowledged, until they fall out of the `message_retention_duration` window. This must be true if you would like to [Seek to a timestamp] (https://cloud.google.com/pubsub/docs/replay-overview#seek_to_a_time).
                message_retention_duration:
                    $ref: '#/components/schemas/Duration'
                labels:
                    type: object
                    description: See <a href="https://cloud.google.com/pubsub/docs/labels"> Creating and managing labels</a>.
                enable_message_ordering:
                    type: boolean
                    description: If true, messages published with the same `ordering_key` in `PubsubMessage` will be delivered to the subscribers in the order in which they are received by the Pub/Sub system. Otherwise, they may be delivered in any order.
                expiration_policy:
                    $ref: '#/components/schemas/ExpirationPolicy'
                filter:
                    type: string
                    description: An expression written in the Pub/Sub [filter language](https://cloud.google.com/pubsub/docs/filtering). If non-empty, then only `PubsubMessage`s whose `attributes` field matches the filter are delivered on this subscription. If empty, then no messages are filtered out.
                dead_letter_policy:
                    $ref: '#/components/schemas/DeadLetterPolicy'
                retry_policy:
                    $ref: '#/components/schemas/RetryPolicy'
                detached:
                    type: boolean
                    description: Indicates whether the subscription is detached from its topic. Detached subscriptions don't receive messages from their topic and don't retain any backlog. `Pull` and `StreamingPull` requests will return FAILED_PRECONDITION. If the subscription is a push subscription, pushes to the endpoint will not be made.
            description: A subscription resource.
        Topic:
            properties:
                name:
                    type: string
                    description: Required. The name of the topic. It must have the format `"projects/{project}/topics/{topic}"`. `{topic}` must start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in length, and it must not start with `"goog"`.
                labels:
                    type: object
                    description: See [Creating and managing labels] (https://cloud.google.com/pubsub/docs/labels).
                message_storage_policy:
                    $ref: '#/components/schemas/MessageStoragePolicy'
                kms_key_name:
                    type: string
                    description: The resource name of the Cloud KMS CryptoKey to be used to protect access to messages published on this topic. The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
                schema_settings:
                    $ref: '#/components/schemas/SchemaSettings'
                satisfies_pzs:
                    type: boolean
                    description: Reserved for future use. This field is set only in responses from the server; it is ignored if it is set in any requests.
            description: A topic resource.
        UpdateSnapshotRequest:
            properties:
                snapshot:
                    $ref: '#/components/schemas/Snapshot'
                update_mask:
                    $ref: '#/components/schemas/FieldMask'
            description: Request for the UpdateSnapshot method.
        UpdateSubscriptionRequest:
            properties:
                subscription:
                    $ref: '#/components/schemas/Subscription'
                update_mask:
                    $ref: '#/components/schemas/FieldMask'
            description: Request for the UpdateSubscription method.
        UpdateTopicRequest:
            properties:
                topic:
                    $ref: '#/components/schemas/Topic'
                update_mask:
                    $ref: '#/components/schemas/FieldMask'
            description: Request for the UpdateTopic method.
        ValidateMessageRequest:
            properties:
                parent:
                    type: string
                    description: Required. The name of the project in which to validate schemas. Format is `projects/{project-id}`.
                name:
                    type: string
                    description: Name of the schema against which to validate. Format is `projects/{project}/schemas/{schema}`.
                schema:
                    $ref: '#/components/schemas/Schema'
                message:
                    type: string
                    description: Message to validate against the provided `schema_spec`.
                    format: bytes
                encoding:
                    type: integer
                    description: The encoding expected for messages
                    format: enum
            description: Request for the `ValidateMessage` method.
        ValidateMessageResponse:
            properties: {}
            description: Response for the `ValidateMessage` method.
        ValidateSchemaRequest:
            properties:
                parent:
                    type: string
                    description: Required. The name of the project in which to validate schemas. Format is `projects/{project-id}`.
                schema:
                    $ref: '#/components/schemas/Schema'
            description: Request for the `ValidateSchema` method.
        ValidateSchemaResponse:
            properties: {}
            description: Response for the `ValidateSchema` method.
